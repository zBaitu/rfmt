Crate {
    module: Mod {
        inner: Span {
            lo: BytePos(
                0,
            ),
            hi: BytePos(
                645,
            ),
            ctxt: #0,
        },
        items: [
            Item {
                ident: main#0,
                attrs: [
                    Attribute {
                        id: AttrId(
                            1,
                        ),
                        style: Inner,
                        path: path(crate_type),
                        tokens: TokenStream(
                            Some(
                                [
                                    (
                                        Token(
                                            Token {
                                                kind: Eq,
                                                span: Span {
                                                    lo: BytePos(
                                                        121,
                                                    ),
                                                    hi: BytePos(
                                                        122,
                                                    ),
                                                    ctxt: #0,
                                                },
                                            },
                                        ),
                                        NonJoint,
                                    ),
                                    (
                                        Token(
                                            Token {
                                                kind: Literal(
                                                    Lit {
                                                        kind: Str,
                                                        symbol: lib,
                                                        suffix: None,
                                                    },
                                                ),
                                                span: Span {
                                                    lo: BytePos(
                                                        123,
                                                    ),
                                                    hi: BytePos(
                                                        128,
                                                    ),
                                                    ctxt: #0,
                                                },
                                            },
                                        ),
                                        NonJoint,
                                    ),
                                ],
                            ),
                        ),
                        is_sugared_doc: false,
                        span: Span {
                            lo: BytePos(
                                107,
                            ),
                            hi: BytePos(
                                129,
                            ),
                            ctxt: #0,
                        },
                    },
                ],
                id: NodeId(4294967040),
                node: Fn(
                    FnDecl {
                        inputs: [],
                        output: Default(
                            Span {
                                lo: BytePos(
                                    39,
                                ),
                                hi: BytePos(
                                    39,
                                ),
                                ctxt: #0,
                            },
                        ),
                        c_variadic: false,
                    },
                    FnHeader {
                        unsafety: Normal,
                        asyncness: Spanned {
                            node: NotAsync,
                            span: Span {
                                lo: BytePos(
                                    29,
                                ),
                                hi: BytePos(
                                    31,
                                ),
                                ctxt: #0,
                            },
                        },
                        constness: Spanned {
                            node: NotConst,
                            span: Span {
                                lo: BytePos(
                                    29,
                                ),
                                hi: BytePos(
                                    31,
                                ),
                                ctxt: #0,
                            },
                        },
                        abi: Rust,
                    },
                    Generics {
                        params: [],
                        where_clause: WhereClause {
                            predicates: [],
                            span: Span {
                                lo: BytePos(
                                    37,
                                ),
                                hi: BytePos(
                                    38,
                                ),
                                ctxt: #0,
                            },
                        },
                        span: Span {
                            lo: BytePos(
                                36,
                            ),
                            hi: BytePos(
                                36,
                            ),
                            ctxt: #0,
                        },
                    },
                    Block {
                        stmts: [
                            stmt(4294967040: #[test]
                            fn test_foo() { }),
                            stmt(4294967040: #[cfg(target_os = "linux")]
                            mod bar { }),
                            stmt(4294967040: #[allow(non_camel_case_types)]
                            type int8_t = i8;),
                            stmt(4294967040: fn some_unused_variables() {
                                #![allow(unused_variables)]
                                let x = ();
                                let y = ();
                                let z = ();
                            }),
                        ],
                        id: NodeId(4294967040),
                        rules: Default,
                        span: Span {
                            lo: BytePos(
                                39,
                            ),
                            hi: BytePos(
                                645,
                            ),
                            ctxt: #0,
                        },
                    },
                ),
                vis: Spanned {
                    node: Inherited,
                    span: Span {
                        lo: BytePos(
                            29,
                        ),
                        hi: BytePos(
                            29,
                        ),
                        ctxt: #0,
                    },
                },
                span: Span {
                    lo: BytePos(
                        29,
                    ),
                    hi: BytePos(
                        645,
                    ),
                    ctxt: #0,
                },
                tokens: None,
            },
        ],
        inline: true,
    },
    attrs: [
        Attribute {
            id: AttrId(
                0,
            ),
            style: Inner,
            path: path(allow),
            tokens: TokenStream(
                Some(
                    [
                        (
                            Delimited(
                                DelimSpan {
                                    open: Span {
                                        lo: BytePos(
                                            8,
                                        ),
                                        hi: BytePos(
                                            9,
                                        ),
                                        ctxt: #0,
                                    },
                                    close: Span {
                                        lo: BytePos(
                                            25,
                                        ),
                                        hi: BytePos(
                                            26,
                                        ),
                                        ctxt: #0,
                                    },
                                },
                                Paren,
                                TokenStream(
                                    Some(
                                        [
                                            (
                                                Token(
                                                    Token {
                                                        kind: Ident(
                                                            unused_variables,
                                                            false,
                                                        ),
                                                        span: Span {
                                                            lo: BytePos(
                                                                9,
                                                            ),
                                                            hi: BytePos(
                                                                25,
                                                            ),
                                                            ctxt: #0,
                                                        },
                                                    },
                                                ),
                                                NonJoint,
                                            ),
                                        ],
                                    ),
                                ),
                            ),
                            NonJoint,
                        ),
                    ],
                ),
            ),
            is_sugared_doc: false,
            span: Span {
                lo: BytePos(
                    0,
                ),
                hi: BytePos(
                    27,
                ),
                ctxt: #0,
            },
        },
    ],
    span: Span {
        lo: BytePos(
            0,
        ),
        hi: BytePos(
            645,
        ),
        ctxt: #0,
    },
}

--------------------------------------------------------------------------------

28: BlankLine []
41: Isolated [
    "// General metadata applied to the enclosing module or crate.",
]
130: BlankLine []
135: Isolated [
    "// A function marked as a unit test",
]
211: Isolated [
    "/* ... */",
]
227: BlankLine []
232: Isolated [
    "// A conditionally-compiled module",
]
321: Isolated [
    "/* ... */",
]
337: BlankLine []
342: Isolated [
    "// A lint attribute used to suppress a warning/error",
]
452: BlankLine []
457: Isolated [
    "// Inner attribute applies to the entire function.",
]
577: BlankLine []
